name: CI
on:
  push:
    branches:
    - auto
    - try
    - wasm-sync2
  pull_request:
    branches:
    - master

jobs:

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
        - wasm32-wasi
        include:
        - target: wasm32-wasi
          os: ubuntu-latest

    steps:
    - uses: actions/checkout@master
    - name: Install Rust (rustup)
      run: |
        rustup update nightly --no-self-update
        rustup default nightly
      if: matrix.os != 'macos-latest'
    - name: Install Rust (macos)
      run: |
        curl https://sh.rustup.rs | sh -s -- -y --default-toolchain nightly
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        rustup update nightly --no-self-update
        rustup default nightly
      if: matrix.os == 'macos-latest'
    - run: |
        rustup default nightly
        rustup target add ${{ matrix.target }}
      if: "!endsWith(matrix.target, 'emulated')"
    - name: Setup (aarch64-apple-darwin)
      run: |
        sudo xcode-select -s /Applications/Xcode_12.2.app/
        echo "SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path)" >> $GITHUB_ENV
        echo "MACOS_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version)" >> $GITHUB_ENV
      if: matrix.target == 'aarch64-apple-darwin'
    - run: cargo generate-lockfile

    # Configure some env vars based on matrix configuration
    - run: echo "NORUN=1" >> $GITHUB_ENV
      if: matrix.norun != '' || startsWith(matrix.target, 'thumb') || matrix.target == 'nvptx64-nvidia-cuda'
    - run: echo "STDARCH_TEST_EVERYTHING=1" >> $GITHUB_ENV
      if: matrix.test_everything != ''
    - run: echo "RUSTFLAGS=${{ matrix.rustflags }}" >> $GITHUB_ENV
      if: matrix.rustflags != ''
    - run: echo "STDARCH_DISABLE_ASSERT_INSTR=1" >> $GITHUB_ENV
      if: matrix.disable_assert_instr != ''
    - run: echo "NOSTD=1" >> $GITHUB_ENV
      if: startsWith(matrix.target, 'thumb') || matrix.target == 'nvptx64-nvidia-cuda'

    # Windows & OSX go straight to `run.sh` ...
    - run: ./ci/run.sh
      shell: bash
      if: matrix.os != 'ubuntu-latest' || startsWith(matrix.target, 'thumb')
      env:
        TARGET: ${{ matrix.target }}

    # ... while Linux goes to `run-docker.sh`
    - run: ./ci/run-docker.sh ${{ matrix.target }}
      shell: bash
      if: "matrix.os == 'ubuntu-latest' && !startsWith(matrix.target, 'thumb')"
      env:
        TARGET: ${{ matrix.target }}
